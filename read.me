# WordPress Deployment on AWS EC2 with LEMP Stack and GitHub Actions

This project sets up a secure, performant WordPress website on an AWS EC2 instance using the LEMP stack (Linux, Nginx, MySQL/MariaDB, and PHP). It also includes automated deployment using GitHub Actions and ensures security best practices, including SSL/TLS with Let's Encrypt.

---

## Table of Contents

1. [Project Overview](#project-overview)
2. [Prerequisites](#prerequisites)
3. [Step-by-Step Instructions](#step-by-step-instructions)
    - [Provisioning the EC2 Instance](#provisioning-the-ec2-instance)
    - [Installing the LEMP Stack](#installing-the-lemp-stack)
    - [Setting Up WordPress](#setting-up-wordpress)
    - [Configuring SSL/TLS](#configuring-ssltls)
    - [Setting Up GitHub Actions](#setting-up-github-actions)
4. [GitHub Actions Workflow](#github-actions-workflow)
5. [Testing and Final Deployment](#testing-and-final-deployment)
6. [Project Documentation](#project-documentation)
7. [Live Demo](#live-demo)

---

## Project Overview

This project covers:

- Hosting WordPress on an **AWS EC2** instance with an **Ubuntu 22.04** server.
- Setting up a **LEMP stack** (Linux, Nginx, MySQL/MariaDB, PHP).
- Automating deployments via **GitHub Actions**.
- Securing the website with **SSL/TLS** using Let's Encrypt.
- Optimizing Nginx configuration for caching and compression.

---

## Prerequisites

Before starting, ensure you have:

1. **AWS Account** with access to launch EC2 instances.
2. **SSH Key Pair** for accessing the EC2 instance.
3. **GitHub Account** for storing the repository.
4. **Domain Name** (optional) for setting up SSL.
5. **Git Installed** on your local machine.

---

## Step-by-Step Instructions

### 1. Provisioning the EC2 Instance

1. **Launch an EC2 Instance**:
   - Go to the AWS EC2 Dashboard.
   - Launch an **Ubuntu 22.04** instance (Free Tier eligible, `t2.micro`).
   - Configure security groups to allow:
     - HTTP (80)
     - HTTPS (443)
     - SSH (22) (restrict to your IP).

2. **SSH into the Instance**:
   ```bash
   ssh -i your-key.pem ubuntu@<your-ec2-public-ip>
   ```

### 2. Installing the LEMP Stack

1. **Update System**:
   ```bash
   sudo apt update -y
   sudo apt upgrade -y
   ```

2. **Install Nginx**:
   ```bash
   sudo apt install nginx -y
   sudo systemctl start nginx
   sudo systemctl enable nginx
   ```

3. **Install MySQL/MariaDB**:
   ```bash
   sudo apt install mariadb-server -y
   sudo systemctl start mariadb
   sudo systemctl enable mariadb
   sudo mysql_secure_installation
   ```

4. **Install PHP**:
   ```bash
   sudo apt install php-fpm php-mysql php-cli php-gd php-curl php-xml php-mbstring -y
   ```

5. **Configure Nginx for PHP**:
   Update `/etc/nginx/sites-available/default` with PHP support.
   
   

### 3. Setting Up WordPress

1. **Download WordPress**:
   ```bash
   cd /var/www/html
   sudo wget https://wordpress.org/latest.tar.gz
   sudo tar -xvzf latest.tar.gz
   sudo chown -R www-data:www-data wordpress/
   sudo chmod -R 755 wordpress/
   ```

2. **Create a MySQL Database**:
   ```bash
   sudo mysql -u root -p
   CREATE DATABASE wordpress;
   CREATE USER 'wp_user'@'localhost' IDENTIFIED BY 'strongpassword';
   GRANT ALL PRIVILEGES ON wordpress.* TO 'wp_user'@'localhost';
   FLUSH PRIVILEGES;
   EXIT;
   ```

3. **Configure WordPress**:
   ```bash
   cd /var/www/html/wordpress
   sudo cp wp-config-sample.php wp-config.php
   sudo nano wp-config.php
   ```
   Update database settings:
   ```php
   define('DB_NAME', 'wordpress');
   define('DB_USER', 'wp_user');
   define('DB_PASSWORD', 'strongpassword');
   define('DB_HOST', 'localhost');
   ```

### 4. Configuring SSL/TLS

1. **Install Certbot**:
   ```bash
   sudo apt install certbot python3-certbot-nginx -y
   ```

2. **Obtain SSL Certificate**:
   ```bash
   sudo certbot --nginx -d your-domain.com
   ```

### 5. Setting Up GitHub Actions

1. **Add SSH Key to GitHub Secrets**:
   - Generate an SSH key:
     ```bash
     ssh-keygen -t rsa -b 4096 -C "your-email@example.com"
     ```
   - Add the private key to **GitHub Secrets** (`SSH_PRIVATE_KEY`).
   - Add the public key to `~/.ssh/authorized_keys` on your EC2 instance.

2. **Create a GitHub Actions Workflow**:

   In `.github/workflows/deploy.yml`:

   ```yaml
   name: Deploy WordPress

   on:
     push:
       branches:
         - main

   jobs:
     deploy:
       runs-on: ubuntu-latest

       steps:
         - name: Checkout repository
           uses: actions/checkout@v2

         - name: Set up SSH
           uses: webfactory/ssh-agent@v0.5.3
           with:
             ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

         - name: Deploy to VPS
           run: |
             ssh -o StrictHostKeyChecking=no ubuntu@<your-ec2-public-ip> << 'EOF'
               cd /var/www/html/
               git pull origin main
               sudo systemctl restart nginx
               EOF
   ```

---

## Testing and Final Deployment

1. **Push Changes to GitHub**:
   ```bash
   git add .
   git commit -m "Initial WordPress deployment"
   git push origin main
   ```

2. **Verify GitHub Actions**:
   - Go to **GitHub Actions** and ensure the workflow runs successfully.

3. **Access Your Website**:
   Navigate to `https://your-domain.com` or `http://<your-ec2-public-ip>/wordpress`.

---
